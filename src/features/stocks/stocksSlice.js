import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  createTimeSeries,
  createVolumeData,
  createSeriesOptions,
} from '../../utils/chartUtils';
import { FILTERS } from '../../utils/constants';
import { fetchStocksAPI } from './stocksAPI';

const initialState = {
  stocks: [],
  isLoaded: false,
  timeSeriesData: [],
  isChartLoaded: false,
  volumeData: [],
  selectedStocks: [],
  seriesOptions: [],
  filteredBy: FILTERS.NO_FILTER,
  resetChart: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchStocks(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchStocksAsync = createAsyncThunk(
  'stocks/fetchUSStocks',
  async () => {
    const endpoint =
      'https://finnhub.io/api/v1/stock/symbol?exchange=US&token=c1u1vo2ad3ifani3r9l0';
    // const response = await fetchStocksAPI(endpoint);
    const response = await import('../charts/stockData.js');
    // The value we return becomes the `fulfilled` action payload
    return response.stockData;
  }
);
export const fetchTimeSeriesAsync = createAsyncThunk(
  'stocks/fetchTimeSeriesData',
  async (stocks) => {
    const endpoint =
      'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=1&from=1615298999&to=1615302599&token=c1u1vo2ad3ifani3r9l0';
    // const response = await fetchStocksAPI(endpoint);
    const response = await import('../charts/data.js');
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const stocksSlice = createSlice({
  name: 'stocks',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    selectStocks: (state, action) => {
      //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
      //   // doesn't actually mutate the state because it uses the Immer library,
      //   // which detects changes to a "draft state" and produces a brand new
      //   // immutable state based off those changes
      return {
        ...state,
        selectedStocks: action.payload,
      };
    },
    setSeriesOptions: (state, action) => {
      return {
        ...state,
        seriesOptions: createSeriesOptions({
          timeSeries: state.timeSeriesData,
          volumeData: state.volumeData,
        }),
      };
    },
    setFilteredBy: (state, action) => {
      state.filteredBy = action.payload;
    },
    setResetChart: (state, action) => {
      state.resetChart = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchStocksAsync.pending, (state) => {
        state.isLoaded = false;
      })
      .addCase(fetchStocksAsync.fulfilled, (state, action) => {
        const filterCommonStock = action.payload.filter(
          (i) => i.type === 'Common Stock'
        );

        return {
          ...state,
          isLoaded: true,
          stocks: [...filterCommonStock],
        };
      });
    builder
      .addCase(fetchTimeSeriesAsync.pending, (state) => {
        state.isChartLoaded = false;
      })
      .addCase(fetchTimeSeriesAsync.fulfilled, (state, action) => {
        const timeSeriesData = createTimeSeries(action.payload);
        const volumeData = createVolumeData(action.payload);
        return {
          ...state,
          isChartLoaded: true,
          timeSeriesData: [...state.timeSeriesData, ...timeSeriesData],
          volumeData: [...state.volumeData, ...volumeData],
          resetChart: false,
        };
      });
  },
});

export const {
  selectStocks,
  setFilteredBy,
  setResetChart,
} = stocksSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.stocks.value)`
export const getStocks = (state) => state.stocksCollection.stocks;
export const getIsChartLoaded = (state) => state.stocksCollection.isChartLoaded;
export const getTimeSeriesData = (state) =>
  state.stocksCollection.timeSeriesData;
export const getVolumeData = (state) => state.stocksCollection.volumeData;
export const getSelectedStocks = (state) =>
  state.stocksCollection.selectedStocks;
export const getFilter = (state) => state.stocksCollection.filteredBy;
export const getResetChart = (state) => state.stocksCollection.resetChart;

export default stocksSlice.reducer;
