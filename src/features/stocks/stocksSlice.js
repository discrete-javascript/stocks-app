import { createSlice } from '@reduxjs/toolkit';
import { createTimeSeries } from '../../utils/chartUtils';
import { FILTERS } from '../../utils/constants';
import { fetchStocksAsync, fetchTimeSeriesAsync } from './stocksThunkOps';

const initialState = {
  stocks: [],
  isLoaded: false,
  timeSeriesData: [],
  isChartLoaded: false,
  volumeData: [],
  selectedStocks: [],
  seriesOptions: [],
  filteredBy: FILTERS.NO_FILTER,
  resetChart: false,
  filterDates: {
    from: '',
    to: '',
  },
};

export const stocksSlice = createSlice({
  name: 'stocks',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    selectStocks: (state, action) => {
      //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
      //   // doesn't actually mutate the state because it uses the Immer library,
      //   // which detects changes to a "draft state" and produces a brand new
      //   // immutable state based off those changes
      return {
        ...state,
        selectedStocks: action.payload,
      };
    },
    setSeriesOptions: (state, action) => {
      return {
        ...state,
      };
    },
    setFilteredBy: (state, action) => {
      const timeSeriesData = createTimeSeries(state.actualData, action.payload);
      return {
        ...state,
        filteredBy: action.payload,
        isChartLoaded: true,
        seriesOptions: timeSeriesData,
        resetChart: false,
      };
    },
    setResetChart: (state, action) => {
      return {
        ...state,
        resetChart: action.payload,
        timeSeries: [],
        volumeData: [],
        seriesOptions: [],
      };
    },
    setFilterDates: (state, action) => {
      state.filterDates = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchStocksAsync.pending, (state) => {
        state.isLoaded = false;
      })
      .addCase(fetchStocksAsync.fulfilled, (state, action) => {
        const filterCommonStock = action.payload.filter(
          (i) => i.type === 'Common Stock'
        );

        return {
          ...state,
          isLoaded: true,
          stocks: [...filterCommonStock],
        };
      });
    builder
      .addCase(fetchTimeSeriesAsync.pending, (state) => {
        state.isChartLoaded = false;
      })
      .addCase(fetchTimeSeriesAsync.fulfilled, (state, action) => {
        if (action.payload.length) {
          const timeSeriesData = createTimeSeries(action.payload);
          return {
            ...state,
            isChartLoaded: true,
            seriesOptions: timeSeriesData,
            resetChart: false,
            actualData: action.payload,
          };
        }
        return state;
      });
  },
});

export const {
  selectStocks,
  setFilteredBy,
  setResetChart,
  setFilterDates,
} = stocksSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.stocks.value)`
export const getStocks = (state) => state.stocksCollection.stocks;
export const getIsChartLoaded = (state) => state.stocksCollection.isChartLoaded;
export const getTimeSeriesData = (state) =>
  state.stocksCollection.timeSeriesData;
export const getVolumeData = (state) => state.stocksCollection.volumeData;
export const getSelectedStocks = (state) =>
  state.stocksCollection.selectedStocks;
export const getFilteredBy = (state) => state.stocksCollection.filteredBy;
export const getResetChart = (state) => state.stocksCollection.resetChart;
export const getFilteredDates = (state) => state.stocksCollection.filterDates;
export const getSeriesOptions = (state) => state.stocksCollection.seriesOptions;

export default stocksSlice.reducer;
