import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { createTimeSeries, createVolumeData } from '../../utils/chartUtils';
import { fetchStocksAPI } from './stocksAPI';

const initialState = {
  stocks: [],
  isLoaded: false,
  timeSeriesData: [],
  isChartLoaded: false,
  volumeData: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchStocks(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchStocksAsync = createAsyncThunk(
  'stocks/fetchUSStocks',
  async () => {
    const endpoint =
      'https://finnhub.io/api/v1/stock/symbol?exchange=US&token=c1u1vo2ad3ifani3r9l0';
    const response = await fetchStocksAPI(endpoint);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const fetchSelectedStockCandleAsync = createAsyncThunk(
  'stocks/fetchTimeSeriesData',
  async () => {
    const endpoint =
      'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=1&from=1615298999&to=1615302599&token=c1u1vo2ad3ifani3r9l0';
    const response = await fetchStocksAPI(endpoint);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const stocksSlice = createSlice({
  name: 'stocks',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchStocksAsync.pending, (state) => {
        state.isLoaded = false;
      })
      .addCase(fetchStocksAsync.fulfilled, (state, action) => {
        const filterCommonStock = action.payload.filter(
          (i) => i.type === 'Common Stock'
        );

        return {
          ...state,
          isLoaded: true,
          stocks: [...filterCommonStock],
        };
      });
    builder
      .addCase(fetchSelectedStockCandleAsync.pending, (state) => {
        state.isChartLoaded = false;
      })
      .addCase(fetchSelectedStockCandleAsync.fulfilled, (state, action) => {
        const createdTimeSeries = createTimeSeries(action.payload);
        const volumeData = createVolumeData(action.payload);
        return {
          ...state,
          isChartLoaded: true,
          timeSeriesData: createdTimeSeries,
          volumeData,
        };
      });
  },
});

export const { increment, decrement, incrementByAmount } = stocksSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.stocks.value)`
export const getStocks = (state) => state.stocksCollection.stocks;
export const getIsChartLoaded = (state) => state.stocksCollection.isChartLoaded;
export const getTimeSeriesData = (state) =>
  state.stocksCollection.timeSeriesData;
export const getVolumeData = (state) => state.stocksCollection.volumeData;

export default stocksSlice.reducer;
